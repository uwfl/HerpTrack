// <auto-generated />
using HerpTrack.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HerpTrack.Web.Migrations
{
    [DbContext(typeof(HerpTrackContext))]
    partial class HerpTrackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HerpTrack.Data.Models.Avatar", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte[]>("Image");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Avatar");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Feeding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("FoodId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.FeedingCycle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CycleInDays");

                    b.Property<long?>("DiaryId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("DiaryId");

                    b.ToTable("FeedingCycle");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.FeedingEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("FeedingId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("PetDiaryId");

                    b.HasKey("Id");

                    b.HasIndex("FeedingId")
                        .IsUnique();

                    b.HasIndex("PetDiaryId");

                    b.ToTable("FeedingEntry");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Pet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Birthdate");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DayOfDeath");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("PetDiaryId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PetDiaryId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.PetDiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("PetDiary");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.PetImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Favorite");

                    b.Property<byte[]>("Image");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("PetId");

                    b.Property<long?>("PetId1");

                    b.HasKey("Id");

                    b.HasIndex("PetId1");

                    b.ToTable("PetImage");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Supplement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long?>("FeedingCycleId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FeedingCycleId");

                    b.ToTable("Supplement");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.User", b =>
                {
                    b.Property<long>("IdentityId");

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<long?>("AvatarId");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Id");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("IdentityId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Weighing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("PetDiaryId");

                    b.Property<decimal>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PetDiaryId");

                    b.ToTable("Weighing");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Avatar", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.User", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("HerpTrack.Data.Models.Avatar", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Feeding", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HerpTrack.Data.Models.FeedingCycle", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.PetDiary", "Diary")
                        .WithMany()
                        .HasForeignKey("DiaryId");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.FeedingEntry", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.Feeding", "Feeding")
                        .WithOne("FeedingEntry")
                        .HasForeignKey("HerpTrack.Data.Models.FeedingEntry", "FeedingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HerpTrack.Data.Models.PetDiary", "Diary")
                        .WithMany("FeedingEntries")
                        .HasForeignKey("PetDiaryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Pet", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.PetDiary", "Diary")
                        .WithOne("Pet")
                        .HasForeignKey("HerpTrack.Data.Models.Pet", "PetDiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HerpTrack.Data.Models.User", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HerpTrack.Data.Models.PetImage", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.Pet", "Pet")
                        .WithMany("Images")
                        .HasForeignKey("PetId1");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Supplement", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.FeedingCycle")
                        .WithMany("Supplement")
                        .HasForeignKey("FeedingCycleId");
                });

            modelBuilder.Entity("HerpTrack.Data.Models.User", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.UserProfile", "UserProfile")
                        .WithOne("User")
                        .HasForeignKey("HerpTrack.Data.Models.User", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HerpTrack.Data.Models.Weighing", b =>
                {
                    b.HasOne("HerpTrack.Data.Models.PetDiary", "PetDiary")
                        .WithMany("Weighings")
                        .HasForeignKey("PetDiaryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
